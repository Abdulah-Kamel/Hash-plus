"use client"
import React, { useState } from 'react';
import { Eye, EyeOff } from 'lucide-react';
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import {Controller,useForm} from "react-hook-form";
import {zodResolver} from "@hookform/resolvers/zod";
import * as z from "zod"
import { toast } from "sonner"
import { Field, FieldLabel, FieldDescription, FieldError } from "@/components/ui/field"
import PhoneInput, { isValidPhoneNumber, getCountryCallingCode } from 'react-phone-number-input'
import 'react-phone-number-input/style.css'
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { ChevronDown } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link";
import googleIcon from "@/assets/google-icon.svg"
import Image from "next/image";

const CustomPhoneInput = React.forwardRef(({ className, placeholder, ...props }, ref) => (
    <div className="relative flex-1">
        <Input
            name="phone"
            {...props}
            ref={ref}
            placeholder=""
            className="h-10 sm:h-12 rounded-r-none flex-1 border-r-0 text-right"
            style={{direction: "ltr"}}
        />
        {/* Custom RTL placeholder */}
        {!props.value && (
            <div
                className="absolute inset-0 flex items-center justify-end px-3 pointer-events-none text-muted-foreground"
                style={{direction: "ltr"}}
            >
                {placeholder}
            </div>
        )}
    </div>
));
CustomPhoneInput.displayName = "CustomPhoneInput";

const RegisterForm = () => {
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [value, setValue] = useState(""); // Phone number value

    const formSchema = z.object({
        fullName: z.string().min(3, "الاسم يجب أن يكون 3 أحرف على الأقل").max(255),
        email: z.string().email("البريد الإلكتروني غير صحيح"),
        phone: z.string().min(1, "رقم الهاتف مطلوب"),
        password: z.string().min(8, "كلمة السر يجب أن تكون 8 أحرف على الأقل").max(255),
        confirmPassword: z.string().min(8).max(255),
        terms: z.boolean().refine(val => val === true, "يجب الموافقة على الشروط والأحكام")
    }).refine((data) => data.password === data.confirmPassword, {
        message: "كلمات السر غير متطابقة",
        path: ["confirmPassword"],
    });

    const {handleSubmit, control} = useForm({
        resolver: zodResolver(formSchema),
        defaultValues: {
            fullName: '',
            email: '',
            phone: '',
            password: '',
            confirmPassword: '',
            terms: false,
        },
    })

    function onSubmit(data) {
        console.log(data)
        toast("You submitted the following values:", {
            description: (
                <pre className="bg-code text-code-foreground mt-2 w-[320px] overflow-x-auto rounded-md p-4">
                    <code>{JSON.stringify(data, null, 2)}</code>
                </pre>
            ),
            position: "bottom-right",
            classNames: {
                content: "flex flex-col gap-2",
            },
            style: {
                "--border-radius": "calc(var(--radius)  + 4px)",
            }
        })
    }

    return (
        <form onSubmit={handleSubmit(onSubmit)}>
            <div className="flex flex-col gap-6">
                {/* Full Name Field */}
                <Controller
                    name="fullName"
                    control={control}
                    render={({ field, fieldState }) => (
                        <div className="grid gap-2">
                            <Label
                                htmlFor={field.name}
                                data-invalid={fieldState.invalid}
                            >
                                الاسم الكامل
                            </Label>
                            <Input
                                {...field}
                                id={field.name}
                                type="text"
                                placeholder="الاسم الكامل"
                                className="h-10 sm:h-12"
                                aria-invalid={fieldState.invalid}
                                autoComplete="name"
                            />
                            {fieldState.invalid && fieldState.error && (
                                <p className="text-sm text-red-500 mt-1">
                                    {fieldState.error.message}
                                </p>
                            )}
                        </div>
                    )}
                />

                {/* Email Field */}
                <Controller
                    name="email"
                    control={control}
                    render={({ field, fieldState }) => (
                        <div className="grid gap-2">
                            <Label
                                htmlFor={field.name}
                                data-invalid={fieldState.invalid}
                            >
                                البريد الالكترونى
                            </Label>
                            <Input
                                {...field}
                                id={field.name}
                                type="email"
                                placeholder="البريد الالكترونى"
                                className="h-10 sm:h-12"
                                aria-invalid={fieldState.invalid}
                                autoComplete="email"
                            />
                            {fieldState.invalid && fieldState.error && (
                                <p className="text-sm text-red-500 mt-1">
                                    {fieldState.error.message}
                                </p>
                            )}
                        </div>
                    )}
                />

                {/* Phone Field */}
                <Controller
                    name="phone"
                    control={control}
                    render={({ field, fieldState }) => (
                        <div className="grid gap-2">
                            <Label
                                htmlFor={field.name}
                                data-invalid={fieldState.invalid}
                            >
                                رقم الهاتف
                            </Label>
                            <div className="flex">
                                <PhoneInput
                                    {...field}
                                    id={field.name}
                                    international={false}
                                    countryCallingCodeEditable={false}
                                    defaultCountry="SA"
                                    value={value}
                                    onChange={(phoneValue) => {
                                        setValue(phoneValue);
                                        field.onChange(phoneValue);
                                    }}
                                    placeholder="رقم الهاتف"
                                    className="flex w-full"
                                    inputComponent={CustomPhoneInput}
                                    withCountryCallingCode={false}
                                    displayInitialValueAsLocalNumber={true}
                                    aria-invalid={fieldState.invalid}
                                    countrySelectComponent={({ value, onChange, options, ...rest }) => (
                                        <DropdownMenu>
                                            <DropdownMenuTrigger asChild>
                                                <Button
                                                    variant="outline"
                                                    className="flex items-center gap-2 h-10 sm:h-12 px-3 rounded-l-none border-l hover:bg-gray-100 min-w-[80px]"
                                                    type="button"
                                                >
                                                    <ChevronDown className="h-4 w-4" />
                                                    <span className="text-sm">
                                                        {value ? `+${getCountryCallingCode(value)}` : '+966'}
                                                    </span>
                                                </Button>
                                            </DropdownMenuTrigger>
                                            <DropdownMenuContent align="start" className="w-56">
                                                <DropdownMenuItem onClick={() => onChange('SA')}>
                                                    <span className="flex items-center gap-2">
                                                        🇸🇦 +966 السعودية
                                                    </span>
                                                </DropdownMenuItem>
                                                <DropdownMenuItem onClick={() => onChange('AE')}>
                                                    <span className="flex items-center gap-2">
                                                        🇦🇪 +971 الإمارات
                                                    </span>
                                                </DropdownMenuItem>
                                                <DropdownMenuItem onClick={() => onChange('KW')}>
                                                    <span className="flex items-center gap-2">
                                                        🇰🇼 +965 الكويت
                                                    </span>
                                                </DropdownMenuItem>
                                                <DropdownMenuItem onClick={() => onChange('QA')}>
                                                    <span className="flex items-center gap-2">
                                                        🇶🇦 +974 قطر
                                                    </span>
                                                </DropdownMenuItem>
                                                <DropdownMenuItem onClick={() => onChange('BH')}>
                                                    <span className="flex items-center gap-2">
                                                        🇧🇭 +973 البحرين
                                                    </span>
                                                </DropdownMenuItem>
                                                <DropdownMenuItem onClick={() => onChange('OM')}>
                                                    <span className="flex items-center gap-2">
                                                        🇴🇲 +968 عمان
                                                    </span>
                                                </DropdownMenuItem>
                                                <DropdownMenuItem onClick={() => onChange('JO')}>
                                                    <span className="flex items-center gap-2">
                                                        🇯🇴 +962 الأردن
                                                    </span>
                                                </DropdownMenuItem>
                                                <DropdownMenuItem onClick={() => onChange('LB')}>
                                                    <span className="flex items-center gap-2">
                                                        🇱🇧 +961 لبنان
                                                    </span>
                                                </DropdownMenuItem>
                                                <DropdownMenuItem onClick={() => onChange('EG')}>
                                                    <span className="flex items-center gap-2">
                                                        🇪🇬 +20 مصر
                                                    </span>
                                                </DropdownMenuItem>
                                            </DropdownMenuContent>
                                        </DropdownMenu>
                                    )}
                                />
                            </div>
                            {fieldState.invalid && fieldState.error && (
                                <p className="text-sm text-red-500 mt-1">
                                    {fieldState.error.message}
                                </p>
                            )}
                        </div>
                    )}
                />

                {/* Password Field */}
                <Controller
                    name="password"
                    control={control}
                    render={({ field, fieldState }) => (
                        <div className="grid gap-2">
                            <Label
                                htmlFor={field.name}
                                data-invalid={fieldState.invalid}
                            >
                                كلمه السر
                            </Label>
                            <div className="relative">
                                <Input
                                    {...field}
                                    id={field.name}
                                    type={showPassword ? 'text' : 'password'}
                                    placeholder="كلمه السر"
                                    className="h-10 sm:h-12 pr-10"
                                    aria-invalid={fieldState.invalid}
                                    autoComplete="new-password"
                                />
                                <button
                                    type="button"
                                    onClick={() => setShowPassword(!showPassword)}
                                    className="absolute inset-y-0 right-0 flex items-center px-3 text-gray-500"
                                >
                                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                                </button>
                            </div>
                            {fieldState.invalid && fieldState.error && (
                                <p className="text-sm text-red-500 mt-1">
                                    {fieldState.error.message}
                                </p>
                            )}
                        </div>
                    )}
                />

                {/* Confirm Password Field */}
                <Controller
                    name="confirmPassword"
                    control={control}
                    render={({ field, fieldState }) => (
                        <div className="grid gap-2">
                            <Label
                                htmlFor={field.name}
                                data-invalid={fieldState.invalid}
                            >
                                تأكيد كلمه السر
                            </Label>
                            <div className="relative">
                                <Input
                                    {...field}
                                    id={field.name}
                                    type={showConfirmPassword ? 'text' : 'password'}
                                    placeholder="تأكيد كلمه السر"
                                    className="h-10 sm:h-12 pr-10"
                                    aria-invalid={fieldState.invalid}
                                    autoComplete="new-password"
                                />
                                <button
                                    type="button"
                                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                                    className="absolute inset-y-0 right-0 flex items-center px-3 text-gray-500"
                                >
                                    {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                                </button>
                            </div>
                            {fieldState.invalid && fieldState.error && (
                                <p className="text-sm text-red-500 mt-1">
                                    {fieldState.error.message}
                                </p>
                            )}
                        </div>
                    )}
                />

                {/* Terms and Conditions */}
                <Controller
                    name="terms"
                    control={control}
                    render={({ field, fieldState }) => (
                        <div className="grid gap-2">
                            <div className="flex items-center space-x-2">
                                <Checkbox
                                    id={field.name}
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                    aria-invalid={fieldState.invalid}
                                />
                                <Label
                                    htmlFor={field.name}
                                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                                    data-invalid={fieldState.invalid}
                                >
                                    أوافق على الشروط والأحكام
                                </Label>
                            </div>
                            {fieldState.invalid && fieldState.error && (
                                <p className="text-sm text-red-500 mt-1">
                                    {fieldState.error.message}
                                </p>
                            )}
                        </div>
                    )}
                />

                {/* Submit Buttons */}
                <div className="flex-col gap-2">
                    <Button type="submit" className="w-full cursor-pointer px-5 py-2 sm:py-6 rounded-lg max-sm:text-xs">
                        إنشاء حساب
                    </Button>
                    <Button variant="outline" className="w-full cursor-pointer px-5 py-2 sm:py-6 rounded-lg mt-2 max-sm:text-xs">
                        تسجيل الدخول عن طريق جوجل
                        <Image src={googleIcon} alt="google logog icon" className="h-5 w-5"/>
                    </Button>
                    <div className="mt-3 max-sm:text-xs text-center mt-6 font-light">
                        لديك حساب بالفعل؟
                        <Link href="/login" className="ms-2 text-primary hover:underline">تسجيل الدخول</Link>
                    </div>
                </div>
            </div>
        </form>
    );
};

export default RegisterForm;